{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nvar initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n}; //액션 -> state를 바꾸고싶을때 액션을 만들어서 dispatch해준다. dispatch해주는 순간 리듀서로 전달된다.\n// 액션 크리에이터\n// const changeNickname = (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n\nexport var loginAction = function loginAction(data) {\n  return {\n    type: 'LOG_IN',\n    data: data\n  };\n};\nexport var logoutAction = function logoutAction() {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // 리듀서 -> 이전상태와 액션을 통해 다음상태를 만드는 함수\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // initial state 객체 펴줌\n        //state.name // 이런식으로 직접 바꿔주면 참조관계 유지로 히스토리가 안남음 그래서 객체 리턴\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          // 이니셜스테이트안에 유저 객체 // 바뀌지않는 데이터(스프레드로 참조관계 유지)\n          isLoggedIn: true,\n          // 내가 바꾸고싶은 데이터\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // initial state\n        //state.name // 이런식으로 직접 바꿔주면 참조관계 유지로 히스토리가 안남음 그래서 객체 리턴\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n    // reducer \"user\" returned undefined during intialization이란 에러가 뜬다면\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/jennayeo/Desktop/hanghae/Nextjs/NodeBird/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAGA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,KADV;AAEFD,IAAAA,IAAI,EAAE,IAFJ;AAGFE,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT,GADW;AAOjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAE;AADT;AAPW,CAArB,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM,C,CAMP;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBZ,YAAyB;AAAA,MAAXa,MAAW;;AAClD,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAKV,OAAL;AACIe,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,6CAAYD,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AACJ,SAAK,QAAL;AACI,6CACOJ,KADP;AACc;AACV;AACAX,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AACe;AACfC,UAAAA,UAAU,EAAE,IAFZ;AAEkB;AAClBD,UAAAA,IAAI,EAAEY,MAAM,CAACL;AAHb;AAHR;;AASJ,SAAK,SAAL;AACA,6CACOI,KADP;AACc;AACV;AACAX,QAAAA,IAAI,kCACGW,KAAK,CAACX,IADT;AAEAC,UAAAA,UAAU,EAAE,KAFZ;AAGAD,UAAAA,IAAI,EAAE;AAHN;AAHR;AASA;;AACA;AACI,aAAOW,KAAP;AA1BR;AA4BH,CA7BD;;AA+BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\n\n\nconst initialState = {\n    user: {\n        isLoggedIn: false,\n        user: null,\n        signUpData: {},\n        loginData: {},\n    },\n    post: {\n        mainPosts: [],\n    }\n};\n\n\n//액션 -> state를 바꾸고싶을때 액션을 만들어서 dispatch해준다. dispatch해주는 순간 리듀서로 전달된다.\n// 액션 크리에이터\n// const changeNickname = (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n\n\nexport const loginAction = (data) => {\n    return {\n        type: 'LOG_IN',\n        data,\n    }\n}\n\nexport const logoutAction = () => {\n    return {\n        type: 'LOG_OUT',\n    }\n}\n\n// 리듀서 -> 이전상태와 액션을 통해 다음상태를 만드는 함수\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case HYDRATE: \n            console.log('HYDRATE', action);\n            return { ...state, ...action.payload };\n        case 'LOG_IN':\n            return {\n                ...state, // initial state 객체 펴줌\n                //state.name // 이런식으로 직접 바꿔주면 참조관계 유지로 히스토리가 안남음 그래서 객체 리턴\n                user: {\n                    ...state.user, // 이니셜스테이트안에 유저 객체 // 바뀌지않는 데이터(스프레드로 참조관계 유지)\n                    isLoggedIn: true, // 내가 바꾸고싶은 데이터\n                    user: action.data,\n                },\n            };\n        case 'LOG_OUT':\n        return {\n            ...state, // initial state\n            //state.name // 이런식으로 직접 바꿔주면 참조관계 유지로 히스토리가 안남음 그래서 객체 리턴\n            user: {\n                ...state.user,\n                isLoggedIn: false,\n                user: null,\n            },\n        };\n        // reducer \"user\" returned undefined during intialization이란 에러가 뜬다면\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}