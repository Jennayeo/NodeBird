{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  isLoggedIn: false,\n  user: null,\n  signUpData: {},\n  loginData: {}\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // 이니셜스테이트안에 유저 객체 // 바뀌지않는 데이터(스프레드로 참조관계 유지)\n        isLoggedIn: true,\n        // 내가 바꾸고싶은 데이터\n        user: action.data\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedIn: false,\n        user: null\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/jennayeo/Desktop/hanghae/Nextjs/NodeBird/reducers/user.js"],"names":["initialState","isLoggedIn","user","signUpData","loginData","reducer","state","action","type","data","loginAction","logoutAction"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAE,KADY;AAExBC,EAAAA,IAAI,EAAE,IAFkB;AAGxBC,EAAAA,UAAU,EAAE,EAHY;AAIxBC,EAAAA,SAAS,EAAE;AAJa,CAArB;;AAQP,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACI,6CAIWF,KAJX;AAIkB;AACVL,QAAAA,UAAU,EAAE,IALpB;AAK0B;AAClBC,QAAAA,IAAI,EAAEK,MAAM,CAACE;AANrB;;AAQJ,SAAK,SAAL;AACA,6CAIWH,KAJX;AAKQL,QAAAA,UAAU,EAAE,KALpB;AAMQC,QAAAA,IAAI,EAAE;AANd;;AASA;AACI,aAAOI,KAAP;AArBR;AAuBH,CAxBD;;AA0BA,OAAO,MAAMI,WAAW,GAAID,IAAD,IAAU;AACjC,SAAO;AACHD,IAAAA,IAAI,EAAE,QADH;AAEHC,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHH,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM;AAMP,eAAeH,OAAf","sourcesContent":["export const initialState = {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {},\n\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOG_IN':\n            return {\n                //...state, // initial state 객체 펴줌\n                //state.name // 이런식으로 직접 바꿔주면 참조관계 유지로 히스토리가 안남음 그래서 객체 리턴\n                // user: {\n                    ...state, // 이니셜스테이트안에 유저 객체 // 바뀌지않는 데이터(스프레드로 참조관계 유지)\n                    isLoggedIn: true, // 내가 바꾸고싶은 데이터\n                    user: action.data,\n            };\n        case 'LOG_OUT':\n        return {\n            //...state, // initial state\n            //state.name // 이런식으로 직접 바꿔주면 참조관계 유지로 히스토리가 안남음 그래서 객체 리턴\n            // user: {\n                ...state,\n                isLoggedIn: false,\n                user: null,\n        };\n        \n        default:\n            return state;\n    }\n};\n\nexport const loginAction = (data) => {\n    return {\n        type: 'LOG_IN',\n        data,\n    }\n}\n\nexport const logoutAction = () => {\n    return {\n        type: 'LOG_OUT',\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}