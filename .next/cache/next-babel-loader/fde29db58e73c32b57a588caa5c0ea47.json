{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux'; // 리듀서 하나로 합쳐주는 리덕스의 메서드\n\nimport user from './user';\nimport post from './post'; //액션 -> state를 바꾸고싶을때 액션을 만들어서 dispatch해준다. dispatch해주는 순간 리듀서로 전달된다.\n// 액션 크리에이터\n// const changeNickname = (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n// 리듀서 -> 이전상태와 액션을 통해 다음상태를 만드는 함수\n// 리듀서를 하나로 합쳐줌\n\nvar rootReducer = combineReducers({\n  // user, post리듀서를 합쳐주는건데 hydrate를 위해 index리듀서 추가\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        // hydrate는 for 리덕스 SSR\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      // reducer \"user\" returned undefined during intialization이란 에러가 뜬다면\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/jennayeo/Desktop/hanghae/Nextjs/NodeBird/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAAQC,eAAR,QAA8B,OAA9B,C,CAAuC;;AACvC,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;;AACA,IAAMC,WAAW,GAAGH,eAAe,CAAE;AACjC;AACAI,EAAAA,KAAK,EAAE,iBAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AAC/B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKR,OAAL;AAAe;AACXS,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;AAEJ;;AACA;AACI,eAAOL,KAAP;AAPR;AASH,GAZoC;AAarCJ,EAAAA,IAAI,EAAJA,IAbqC;AAcrCC,EAAAA,IAAI,EAAJA;AAdqC,CAAF,CAAnC;AAiBA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport {combineReducers} from 'redux'; // 리듀서 하나로 합쳐주는 리덕스의 메서드\nimport user from './user';\nimport post from './post';\n\n\n//액션 -> state를 바꾸고싶을때 액션을 만들어서 dispatch해준다. dispatch해주는 순간 리듀서로 전달된다.\n// 액션 크리에이터\n// const changeNickname = (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n\n\n\n\n// 리듀서 -> 이전상태와 액션을 통해 다음상태를 만드는 함수\n// 리듀서를 하나로 합쳐줌\nconst rootReducer = combineReducers ({\n    // user, post리듀서를 합쳐주는건데 hydrate를 위해 index리듀서 추가\n    index: (state = {}, action) => {\n    switch (action.type) {\n        case HYDRATE:  // hydrate는 for 리덕스 SSR\n            console.log('HYDRATE', action);\n            return { ...state, ...action.payload };\n        \n        // reducer \"user\" returned undefined during intialization이란 에러가 뜬다면\n        default:\n            return state;\n    }          \n},\nuser,\npost,\n});\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}